# Simple table of summary statistics (type="text" only useful to see result in console)
stargazer(chicago, type="text")
# Simple table of summary statistics (type="text" only useful to see result in console)
stargazer(chicago)
# Simple table of summary statistics (type="text" only useful to see result in console)
stargazer(chicago)
# Simple table of summary statistics (type="text" only useful to see result in console)
stargazer(chicago,type='text')
# Do it also for a subset of your variables and export
stargazer(subset(chicago, select=c(pm25, pm10tmean2, burning)), out="./Figures&Tables/Table1.html")
# Do it also for a subset of your variables and export
stargazer(subset(chicago, select=c(pm25, pm10tmean2)), out="./Figures&Tables/Table1.html")
# Do it also for a subset of your variables and export
stargazer(subset(chicago, select=c(pm25, pm10tmean2)),
out="./Figures&Tables/Table1.html")
## Summaries by group
# Example 1: by 'tempcat'
install.packages('vtable')
library(vtable)
## Summaries by group
# Example 1: by 'tempcat'
install.packages('vtable')
library(vtable)
# Example 2: by 'year'
chicago <- mutate(chicago, year = as.POSIXlt(date)$year+1900)
st(chicago, group='year')
# If you want to export in a nice format
st(chicago, out='browser') # open table in browser
st(chicago, file='./Figures&Tables/Table2.html') # store it as html file
## Summaries by group
# Example 1: by 'tempcat'
install.packages('vtable')
library(vtable)
st(chicago, group='tempcat')
# Example 2: by 'year'
chicago <- mutate(chicago, year = as.POSIXlt(date)$year+1900)
st(chicago, group='year')
# Example 3: by 'month'
# I introduce here the "then" operator: %>%
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% st(group='month')
# If you want to export in a nice format
st(chicago, out='browser') # open table in browser
st(chicago, file='./Figures&Tables/Table2.html') # store it as html file
# Example 2: by 'year'
chicago = mutate(chicago, year = as.POSIXlt(date)$year+1900)
st(chicago, group='year')
# Example 3: by 'month'
# I introduce here the "then" operator: %>%
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% st(group='month')
# Do it also for a subset of your variables and export
stargazer(subset(chicago, select=c(pm25, pm10tmean2)),out="./Figures&Tables/Table1.html")
## Summaries by group
# Example 1: by 'tempcat'
install.packages('vtable')
library(vtable)
st(chicago, group='tempcat')
# Example 2: by 'year'
chicago = mutate(chicago, year = as.POSIXlt(date)$year+1900)
st(chicago, group='year')
# Example 3: by 'month'
# I introduce here the "then" operator: %>%
chicago %>% mutate(month = as.POSIXlt(date)$mon + 1) %>% st(group='month')
# If you want to export in a nice format
st(chicago, out='browser') # open table in browser
st(chicago, file='./Figures&Tables/Table2.html') # store it as html file
rm(list=ls())
# Set wd
setwd("~/Mirror/Mirror/on_the_wall/who_s_the_fairest/of_them/ALL")
rm(list=ls())
# Set wd
setwd("~/Mirror/Mirror/on_the_wall/who_s_the_fairest/of_them/ALL")
rm(list=ls())
# Set wd
setwd("~/Mirror/Mirror/on_the_wall/who_s_the_fairest/of_them/ALL")
# Set wd
setwd("Yaejinkim')
#### Some basic plots ####
# 'library(datasets)' --> The R Datasets package. We are going to use dataset 'airquality'
# First step: learning some plots functions. Second: learn how to make graphs look nicer
# Basic histogram
hist(airquality$Ozone)
# Scatter plot
with(airquality, plot(Wind, Ozone))
# Add a title to graph
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
#..or in 1 line
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
# Change color of a subset of your datapoints
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
# Add a legend
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1,box.lty = 0, col = c("blue", "red"), legend = c("May", "Other Months"), pt.cex=0.7, cex=0.7)
# alternative to 'topright': "bottomright", "bottom", "bottomleft", "left", "topleft", "top", "topright", "right" and "center"
# you can also change background color using bg='somecolor', e.g. bg='lightblue'
# you can also change the font, e.g. text.font=1 (or 2,3,4)
# you can also add a title, e.g. title="Legend"; size of legend: cex parameter, e.g. cex=0.75
# arguments box.lty, box.lwd and box.col can be used to modify the line type, width and color for the legend box border
# example w/ box removal: box.lty=0
# you can even specify if you want it horizontally (default is 'false'), e.g. horiz=TRUE
# Add lines as you like (thinking of y=a+bx)
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City", type = "n"))
abline(a=0,b=1) # 45Â° line
### Multiple graphs together
# mfrow sets the number of plots per row/column (plots filled row-wise. mfcol fills plots column-wise
# e.g. mfrow = c(2, 3) means that we want 6 pictures displayed in 2 rows and 3 columns
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
})
with(airquality, plot(Wind, Ozone, main="Ozone and Wind"))
with(airquality, plot(Solar.R, Ozone, main="Ozone and Solar Radiation"))
# You can also do it step by step
par(mfrow = c(1,1))
# mar - A numeric vector of length 4, which sets the margin sizes in the following order: bottom, left, top, and right.
# The default is c(5.1, 4.1, 4.1, 2.1). For example, par(mar=c(4,0,0,0)) draws a margin of 4 lines only on the bottom of the chart
# oma=outer margin area; for example par(oma=c(3,3,3,3)) means all sides have 3 lines of space
par(mfrow = c(1, 3), mar = c(4, 0, 0, 0), oma = c(3, 3, 3, 3))
with(airquality, {
plot(Wind, Ozone, main = "Ozone and Wind")
plot(Solar.R, Ozone, main = "Ozone and Solar Radiation")
plot(Temp, Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
})
# So it seems that there's not much space on top, so let's increase the outer margin by setting oma=c(0,0,2,0)
# Since I'd also like to see the label of the x and y axis, let's increase margins both at the bottom and to the left
# So set mar=c(4,4,2,1) for example
## More complicated (in terms of syntax) (but nicer) graphs
# Let's use ggplot2!
# For those interested, here are some datasets you can play around with
# http://fmwww.bc.edu/ec-p/data/wooldridge/datasets.list.html
# These come from the very famous Wooldridge book(s)
# R has a library of these same datasets
library(wooldridge)
# We now use 'gapminder' though
library(gapminder)
# A convenient way to combine the package installation and loading steps
# is with the pacman package's p_load() function. If you run
# pacman::p_load(gapminder) it will first look to see whether it
#needs to install the package before loading it
pacman::p_load(gapminder, ggplot2)
gapminder = gapminder
# Basic scatter plot. '+ geom_point()' allows to change size, color and shape
ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) +
geom_point()
# Change the point color, size and transparency
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, col = continent)) +
geom_point(alpha = 0.3) ## "alpha" controls transparency. Takes a value between 0 and 1
# At times it can be convenient to define an intermediate plot object
# that we can re-use.
g = ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp))
# You can add regression lines by using: geom_smooth(), stat_smooth() or geom_abline()
# Let's see geom_smooth()
# method : smoothing method to be used. Possible values are lm, glm, gam, loess, rlm
# se : logical value. If TRUE, confidence interval is displayed around smooth (default)
# fullrange : logical value. If TRUE, the fit spans the full range of the plot (default)
# level : level of confidence interval to use. Default value is 0.95
# See example below
g +
geom_point(aes(size = pop, col = continent), alpha = 0.3)  +
geom_smooth(method = "lm")
# Make it fancier
g +
geom_point(aes(size = pop, col = continent), alpha = 0.3)  +
geom_smooth(method = "loess", linetype="dashed", color="darkred", fill="blue")
# You can build out some truly impressive complexity and
# transformation of your visualization through this 'simple'
# layering process. (no need to transform data)
g2 = g +
geom_point(aes(size = pop, col = continent), alpha = 0.3) +
scale_color_brewer(name = "Continent", palette = "Set1") + ## Different colour scale
scale_size(name = "Population", labels = scales::comma) + ## Different point (i.e. legend) scale
scale_x_log10(labels = scales::dollar) + ## Switch to logarithmic scale on x-axis. Use dollar units.
labs(x = "Log (GDP per capita)", y = "Life Expectancy") + ## Better axis titles
theme_minimal() ## Try a minimal (b&w) plot theme
# Last fancy thing for today: animation! but don't execute it here!
install.packages("gganimate")
library(gganimate)
install.packages("gifski")
install.packages("av")
library(gifski)
library(av)
ggplot(gapminder, aes(gdpPercap, lifeExp, size = pop, colour = country)) +
geom_point(alpha = 0.7, show.legend = FALSE) +
scale_colour_manual(values = country_colors) +
scale_size(range = c(2, 12)) +
scale_x_log10() +
facet_wrap(~continent) +
# Here comes the gganimate specific bits
labs(title = 'Year: {frame_time}', x = 'GDP per capita', y = 'life expectancy') +
transition_time(year) +
ease_aes('linear')
### Doing regressions in R ###
# great source: https://raw.githack.com/uo-ec607/lectures/master/08-regression/08-regression.html#High_dimensional_FEs_and_multiway_clustering
# Suppose you want to do the regression analysis in another folder --> change directory
setwd("~/The/unintended/consequences/of/love")
dir.create("./analysis")
# Remove all plots
dev.off()
# Use one of Wooldridge datasets
# library(wooldridge) and then type 'name_of_data_you_choose = wooldridge::' and pick the one you need from the list
library(foreign)
ceosal = read.dta("http://fmwww.bc.edu/ec-p/data/wooldridge/ceosal1.dta")
# See some summary statistics
ceosal1 = subset(ceosal, select=c(salary, roe) )
summary(ceosal1)
# Or just use our beloved 'stargazer'
library(stargazer)
stargazer(ceosal1, type="text", out = "./table1.html") # Remember: if you don't specify "type", default is LaTex
# Plot the data to have an understanding of how it looks --> also learn how to export it
# Salary distribution (and mean). Let's create the handle first, this time
g = ggplot(ceosal1, aes(x = salary)) + geom_histogram(fill = "blue", color="black")
print(g) #necessary!
## Learn how to export graphs
dir.create("./Figures&Tables")
# Add the mean
png("./Figures&Tables/salary_hist.png")
g = ggplot(ceosal1, aes(x = salary)) + geom_histogram(fill = "red", color="black") +
geom_vline(aes(xintercept=mean(salary)), color="black", linetype="dashed", size=1)
print(g) #necessary!
dev.off() #also necessary!
# Log-salary distribution
jpeg("./Figures&Tables/lsalary_hist.jpg")
ceosal1 = subset(ceosal, select=c(salary, roe, lsalary) )
g = ggplot(ceosal1, aes(x = lsalary)) + geom_histogram(fill = "red", color="black") +
geom_vline(aes(xintercept=mean(lsalary)), color="black", linetype="dashed", size=1)
print(g)
dev.off()
## Linear regressions --> lm function. No package required
### Running a simple regression of y on a constant
sal_mean = lm(salary ~ 1, data = ceosal1)
summary(sal_mean) #terrible, I don't like it
stargazer(sal_mean, type="text")
#export file. Remember how to do it?
### Adding a regressor to our model
# Let's 'try to explain salaries with roe'
g = ggplot(ceosal1, aes(x = roe, y = salary)) + geom_point()
g
# Recovering coefficients by hand --> apply what you've seen in class
# First way:
y = ceosal1$salary
x = ceosal1$roe
beta_1 = cov(x,y)/var(x)
beta_0 = mean(y)-beta_1*mean(x)
beta_0
round(beta_1, digits = 3)
# round it to the 3rd decimal
# Second way:
X = as.matrix(cbind(1,ceosal1$roe))
Y = as.matrix(ceosal1$salary)
bh = solve(t(X)%*%X)%*%t(X)%*%Y #solve(A) gives the inverse of A where A is a square matrix
bh
# Now let's use the easier command lm
model = lm(salary ~ roe, data = ceosal1)
summary(model)
stargazer(model, type="text") # interpretation?
# Let's add the fitted line to the scatter
g = g + geom_smooth( method= "lm")
print(g)  # can export it with commands shown above
### Multiple linear regression
# Let's get another dataset
gpa3 = read.dta("http://fmwww.bc.edu/ec-p/data/wooldridge/gpa3.dta")
gpa3 = wooldridge::gpa3
# See some summary stats (as usual...)
gpa31 = subset(gpa3, select=c(cumgpa,female,sat,hsperc,tothrs))
stargazer(gpa31, type="text")
# Run the regression
model0 = lm(cumgpa~female + sat + hsperc + tothrs, data=gpa3) #does it make sense to you?
stargazer(model0, align=TRUE, type="text")
# Add interactions (what are they?)
linear_1 = lm(cumgpa~female*(tothrs) + sat + hsperc, data=gpa3)
linear_2 = lm(cumgpa~female*(sat+hsperc+tothrs), data=gpa3)
# Display results in same table
stargazer(linear_1, linear_2, title="Results", align=TRUE, type="text") #align argument TRUE, so that coefficients in each column are aligned along the decimal point.
# You can also add lines...
stargazer(linear_1, linear_2, title="Results", align=TRUE, type="text", add.lines = list(c("Fixed Effects", "No", "No")))
# ...and keep only the statistics you want with 'keep.stat=c("n", "rsq")'
stargazer(linear_1, linear_2, title="Results", align=TRUE, type="text", add.lines = list(c("Fixed Effects", "No", "No"), c("Matteo", "yes", "no")), keep.stat=c("n", "rsq"), out="./Figures&Tables/Table3.html")
# modelsummary is another nice package to export results in a nice table
# Store a single coefficient
coef(linear_1)[1]
# Store/display a single standard error
summary(linear_1)
summary(linear_1)$coefficients[4,2]
coeff = summary(linear_1)$coefficients[4,2]
print(paste("Coefficient is",coeff)) # maybe round coeff
# convenient for RMD --> you can use math syntax
print(paste("$\beta is$", coeff))
# Store/display p-value for single coefficient
summary(linear_1)$coefficients[4,4]
# Store the residuals
resid1 = resid(linear_1)
# Use package "car" which is useful for testing hypotesis on interacted (or just any) coefficients
library(car)
# test that all coefficients including female (so female + interactions) are 0
linearHypothesis(linear_1, matchCoefs(linear_1, "female"))
# only test interactions being equal to each other
linearHypothesis(linear_2, c("female:sat=female:hsperc", "female:sat=female:tothrs"))
# test 2 coefficients = 0
linearHypothesis(linear_2, c("female=0", "sat=0"))
##################
# IV Regressions #
##################
library(AER)
ivdata = wooldridge::card
olsmod = lm(wage ~ educ + black + fatheduc + exper + IQ + south
+ married + momdad14, data=ivdata)
# Use nearc2 as instrument
ivmod = ivreg(wage ~ educ + black + fatheduc + exper + IQ + south
+ married + momdad14 | nearc2 + black + fatheduc + exper + IQ + south
+ married + momdad14, data = ivdata)
stargazer(olsmod, ivmod, keep.stat="n")
# First stage?
firststage = lm(wage ~ nearc2 + black + fatheduc + exper + IQ + south
+ married + momdad14, data=ivdata)
#######################
# Panel Data Analysis #
#######################
# Need package 'fixest'
pacman::p_load("fixest")
# Open a panel dataset
crime = wooldridge::crime4
# we have COUNTY by YEAR observations
# in many cases a variable like county should be coded numerically first
# just use function "factor"
# crime$county.f = factor(crime$county)
# Suppose we want to estimate crimerate on probability of ending in prison
with(crime, plot(prbpris, crmrte))
# Do it with OLS
ols = lm(crmrte ~ prbpris, data=crime)
stargazer(ols, title="OLS", align=TRUE, type="text", keep = "prbpris",
add.lines = list(c("County FE", "N")), keep.stat=c("n", "rsq"))
# Suppose we want to control for year specific shocks across counties
# you can simply use lm
panel1 = lm(crmrte ~ prbpris+factor(year), data=crime)
stargazer(panel1, title="FE (year)", align=TRUE, type="text", keep = "prbpris",
add.lines = list(c("County FE", "N"), c("Year FE", "Y")), keep.stat=c("n", "rsq"))
# or feols. But, stargazer doesn't read the output. You can still
# use 'summary'
# Morover: feols by default computes clustered standard errors
# therefore when showing results make sure SEs are comparable
panel1aux = feols(crmrte ~ prbpris |year, data=crime)
summary(panel1aux, se='standard')
# Suppose we want to control for county specific time invariant characteristics
panel2 = lm(crmrte ~ prbpris+factor(county), data=crime)
stargazer(panel2, title="FE (county)", align=TRUE, type="text", keep = "prbpris",
add.lines = list(c("County FE", "Y"), c("Year FE", "N")), keep.stat=c("n", "rsq"))
# Suppose we want to control for time specific characteristics and county specific ones
panel3 = lm(crmrte ~ prbpris+factor(county)+factor(year), data=crime)
stargazer(panel3, title="FE (all)", align=TRUE, type="text", keep = "prbpris",
add.lines = list(c("County FE", "Y"), c("Year FE", "Y")), keep.stat=c("n", "rsq"))
# Show everything in one table
stargazer(ols, panel1, panel2, panel3, title="Various Specifications", align=TRUE,
type="text", keep = "prbpris", keep.stat=c("n", "rsq"),
add.lines = list(c("County FE", "N", "N", "Y", "Y"),
c("Year FE", "N", "Y", "N", "Y")),
column.labels = c("OLS", "Year FE", "County FE", "All FE"))
# Robust se, one and two way cluster robust st.errors (suppose county clusters)
# Robust standard errors
# either use lm_robust
library(estimatr)
ols_rob0 = lm_robust(crmrte ~ prbpris +factor(county)
+factor(year) , data = crime)
# or feols with option 'white'
ols_rob = feols(crmrte ~ prbpris | county
+ year, data = crime)
ols_rob = summary(ols_rob, se='white')
summary(ols_rob0)
summary(ols_rob)
# 1 way clustering
ols_1way = feols(crmrte ~ prbpris | county
+ year, data = crime)
# 2 way clustering
ols_2way = summary(ols_1way, cluster = c('county','year'))
msummary(list(ols_rob, ols_1way, ols_2way),
coef_map = c('prbpris'='P(prison)'),
gof_omit = "AIC|BIC|DF|Deviance|IC|Log|Adj|Pseudo|Within|se_type" )
### Simulate samples drawn from known distributions ###
# Suppose you want to draw a sample of size 100 from a normal distribution
# with mean 2 and sd 1.
normal1 = replicate(n=1, rnorm(100,2,1))
# Let's draw 10 samples now
normal2 = replicate(n=10, rnorm(100,2,1))
# for replicability --> set.seed (google it!)
##########################################
# Before we finish: how to open Markdown #
##########################################
# Go to 'file' ---> 'New File' ---> 'R Markdown'
# You may get a message asking to install 1 or more packages. Do it.
# Then you have to select the 'type' of document you want to produce
# Select 'document' (you may notice you can also prepare presentations)
# Type the title of the document (example: "Problem Set 1")
# Type the author(s)
# Select output format (I would say 'pdf') then press 'ok'
# A new document will open. Save it in subfolder within your working directory
# Then you can start using the document. You can look at the uploaded template for more.
source('~/Downloads/IntroToR_part_II.R')
library(ggplot2)
library(ggpminder)
gapminder = gapminder
# Change the point color, size and transparency
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp, size = pop, col = continent)) +
geom_point(alpha = 0.3) ## "alpha" controls transparency. Takes a value between 0 and 1
# Change the point color, size and transparency
ggplot(data = gapminder, aes(x = gdpPercap, y = lifeExp)) +
geom_point(alpha = 0.3) ## "alpha" controls transparency. Takes a value between 0 and 1
library(fivethirtyeight)
data(steak_survey)
#(a) generating variables
steak_survey$cooking_temp[steak_survey$steak_prep == "Rare"] <- 120
steak_survey$cooking_temp[steak_survey$steak_prep == "Medium rare"] <- 130
steak_survey$cooking_temp[steak_survey$steak_prep == "Medium"] <- 135
steak_survey$cooking_temp[steak_survey$steak_prep == "Medium Well"] <- 140
steak_survey$cooking_temp[steak_survey$steak_prep == "Well"] <- 150
steak_survey$cheat[steak_survey$cheated == NA] <- NA
steak_survey$cheat[steak_survey$cheated==TRUE] <- 1
steak_survey$cheat[steak_survey$cheated==FALSE] <- 0
steak_survey$riskaverse[steak_survey$lottery_a == NA] <- NA
steak_survey$riskaverse[steak_survey$lottery_a==TRUE] <- 0
steak_survey$riskaverse[steak_survey$lottery_a==FALSE] <- 1
steak_survey$yrs_ed[steak_survey$educ == NA] <- NA
steak_survey$yrs_ed[steak_survey$educ =="Less than high school degree"] <- 8
steak_survey$yrs_ed[steak_survey$educ =="High school degree"] <- 12
steak_survey$yrs_ed[steak_survey$educ =="Some college or Associate degree"] <- 14
steak_survey$yrs_ed[steak_survey$educ =="Bachelor degree"] <- 16
steak_survey$yrs_ed[steak_survey$educ =="Graduate degree"] <- 18
set.seed(123)
rand_age18 = sample(18:29, 200, replace = TRUE)
rand_age30 = sample(30:44, 200, replace = TRUE)
rand_age45 = sample(45:60, 200, replace = TRUE)
rand_age60 = sample(61:90, 200, replace = TRUE)
steak_survey$rand_age[steak_survey$age == "18-29" & is.na(steak_survey$age) == FALSE] <- rand_age18
steak_survey$rand_age[steak_survey$age == "30-44" & is.na(steak_survey$age) == FALSE] <- rand_age30
steak_survey$rand_age[steak_survey$age == "45-60" & is.na(steak_survey$age) == FALSE] <- rand_age45
steak_survey$rand_age[steak_survey$age == "> 60" & is.na(steak_survey$age) == FALSE] <- rand_age60
steak_survey$age_cat[steak_survey$age == "18-29" & is.na(steak_survey$age) == FALSE] <- 1
steak_survey$age_cat[steak_survey$age == "30-44" & is.na(steak_survey$age) == FALSE] <- 2
steak_survey$age_cat[steak_survey$age == "45-60" & is.na(steak_survey$age) == FALSE] <- 3
steak_survey$age_cat[steak_survey$age == "> 60" & is.na(steak_survey$age) == FALSE] <- 4
if(!file.exists("Figures&Tables")){dir.create("Figures&Tables")}
library(stargazer)
stargazer(subset(steak_survey, select=c(cooking_temp, cheat, riskaverse, yrs_ed,rand_age)),
type = "text", out="./Figures&Tables/table1.html")
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Rare"] <- 1
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium rare"] <- 2
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium"] <- 3
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium Well"] <- 4
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Well"] <- 5
a=hist(steak_survey$steak_temp_numeric, col='blue', breaks=20, main = 'Frequency of Steak Preparation', xlab='Steak Preparation', ylab='Frequency', xlim=c(1,5),
ylim=c(0,200))
legend('topright', c('1 = Rare', '2 = Medium Rare', '3 = Medium', '4 = Medium Well', '5 = Well'))
#(c) regression analysis 1 (linear)
library(dplyr)
steak_survey %>% filter(steak == TRUE)
axis(side = 1, at = seq(0.5,4.5, by = 1), labels = c("raw", "medium raw", "medium", "medium well", "well"))
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium Well"] <- 4
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Well"] <- 5
a=hist(steak_survey$steak_temp_numeric, col='blue', breaks=20, main = 'Frequency of Steak Preparation', xlab='Steak Preparation', ylab='Frequency', xlim=c(1,5),
ylim=c(0,200))
axis(side = 1, at = seq(0.5,4.5, by = 1), labels = c("raw", "medium raw", "medium", "medium well", "well"))
library(fivethirtyeight)
data(steak_survey)
#(a) generating variables
steak_survey$cooking_temp[steak_survey$steak_prep == "Rare"] <- 120
steak_survey$cooking_temp[steak_survey$steak_prep == "Medium rare"] <- 130
steak_survey$cooking_temp[steak_survey$steak_prep == "Medium"] <- 135
steak_survey$cooking_temp[steak_survey$steak_prep == "Medium Well"] <- 140
steak_survey$cooking_temp[steak_survey$steak_prep == "Well"] <- 150
steak_survey$cheat[steak_survey$cheated == NA] <- NA
steak_survey$cheat[steak_survey$cheated==TRUE] <- 1
steak_survey$cheat[steak_survey$cheated==FALSE] <- 0
steak_survey$riskaverse[steak_survey$lottery_a == NA] <- NA
steak_survey$riskaverse[steak_survey$lottery_a==TRUE] <- 0
steak_survey$riskaverse[steak_survey$lottery_a==FALSE] <- 1
steak_survey$yrs_ed[steak_survey$educ == NA] <- NA
steak_survey$yrs_ed[steak_survey$educ =="Less than high school degree"] <- 8
steak_survey$yrs_ed[steak_survey$educ =="High school degree"] <- 12
steak_survey$yrs_ed[steak_survey$educ =="Some college or Associate degree"] <- 14
steak_survey$yrs_ed[steak_survey$educ =="Bachelor degree"] <- 16
steak_survey$yrs_ed[steak_survey$educ =="Graduate degree"] <- 18
set.seed(123)
rand_age18 = sample(18:29, 200, replace = TRUE)
rand_age30 = sample(30:44, 200, replace = TRUE)
rand_age45 = sample(45:60, 200, replace = TRUE)
rand_age60 = sample(61:90, 200, replace = TRUE)
steak_survey$rand_age[steak_survey$age == "18-29" & is.na(steak_survey$age) == FALSE] <- rand_age18
steak_survey$rand_age[steak_survey$age == "30-44" & is.na(steak_survey$age) == FALSE] <- rand_age30
steak_survey$rand_age[steak_survey$age == "45-60" & is.na(steak_survey$age) == FALSE] <- rand_age45
steak_survey$rand_age[steak_survey$age == "> 60" & is.na(steak_survey$age) == FALSE] <- rand_age60
steak_survey$age_cat[steak_survey$age == "18-29" & is.na(steak_survey$age) == FALSE] <- 1
steak_survey$age_cat[steak_survey$age == "30-44" & is.na(steak_survey$age) == FALSE] <- 2
steak_survey$age_cat[steak_survey$age == "45-60" & is.na(steak_survey$age) == FALSE] <- 3
steak_survey$age_cat[steak_survey$age == "> 60" & is.na(steak_survey$age) == FALSE] <- 4
if(!file.exists("Figures&Tables")){dir.create("Figures&Tables")}
library(stargazer)
stargazer(subset(steak_survey, select=c(cooking_temp, cheat, riskaverse, yrs_ed,rand_age)),
type = "text", out="./Figures&Tables/table1.html")
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Rare"] <- 1
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium rare"] <- 2
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium"] <- 3
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Medium Well"] <- 4
steak_survey$steak_temp_numeric[steak_survey$steak_prep == "Well"] <- 5
a=hist(steak_survey$steak_temp_numeric, col='blue', breaks=20, main = 'Frequency of Steak Preparation', xlab='Steak Preparation', ylab='Frequency', xlim=c(1,5),
ylim=c(0,200))
axis(side = 1, at = seq(0.5,4.5, by = 1), labels = c("raw", "medium raw", "medium", "medium well", "well"))
setwd("~/Desktop/DTFF-21-YMMP")
install.packages("packrat")
library(wesanderson)
packrat::init
